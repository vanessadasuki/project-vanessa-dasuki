import pandas as pd

"""
Program Overview: Forecast the flight bookings based upon days prior and day of week of the departure

"""

def addForecast(sample, testcase, parameter):
    
    # perform both 'day_of_week' and 'daysToDepart' analysis if parameter is True, else do just 'daysToDepart'
    if parameter == True:
        testcase = testcase.merge(sample.groupby(["DaysToDepart", "day_of_week"])["remDemand"].mean(),
                                   on=["DaysToDepart", "day_of_week"],how = "inner")
        
    else:
        testcase = testcase.merge(sample.groupby("DaysToDepart")["remDemand"].mean(),
                                  on= "DaysToDepart", how = "inner")
    
    testcase["addForecast"] = testcase["cum_bookings"] + testcase["remDemand"] # calculate additive values
    
    # a fraction of table is saved to create a results table of sorts later
    additiveFcst = testcase[["departure_date", "booking_date" , "day_of_week", "DaysToDepart" , "addForecast"]]  
    
    (addError, naiveError) = absError(testcase, 'add') # error calculation
    
    mase = findMASE(addError, naiveError) # Mase calculation
    
    return (additiveFcst, mase)
    
def multiForecast(sample, testcase, dayOfWeek):
    
    # perform both 'day_of_week' and 'daysToDepart' analysis if parameter is True, else do just 'daysToDepart'
    if dayOfWeek == True:
        testcase  = testcase.merge(sample.groupby(["DaysToDepart", "day_of_week"])["rateBookings"].mean(),
                          on=["DaysToDepart", "day_of_week"], how = "inner")
    
    else:
        testcase  = testcase.merge(sample.groupby("DaysToDepart")["rateBookings"].mean(),
                                   on= "DaysToDepart", how = "inner")
    
    testcase["multiForecast"] = testcase["cum_bookings"]/testcase["rateBookings"] # calculate multi values
    
    # a fraction of table is saved to create a results table of sorts later
    multiplicativeFcst = testcase[["departure_date", "booking_date" ,"day_of_week", "DaysToDepart" ,"multiForecast"]]
    
    (multiError, naiveError) = absError(testcase, 'multi') # error calculation
    
    mase = findMASE(multiError, naiveError) # Mase calculation
    
    return (multiplicativeFcst, mase)


def absError(testcase, forecastType):
    
    testcase["naiveError"] = abs(testcase["naive_fcst"] 
                                    - testcase["Final_Demand"])
        
    naiveError = testcase["naiveError"].sum()
    
    
    if forecastType.lower() == 'add':
        
        testcase["addError"] = abs(testcase["addForecast"] 
                                    - testcase["Final_Demand"])
        
        addError = testcase["addError"].sum()
        
        return addError, naiveError
        
    elif forecastType.lower() == 'multi':
        
        testcase["multiError"] = abs(testcase["multiForecast"] 
                                    - testcase["Final_Demand"])
        
        multiError = testcase["multiError"].sum()
        
        return multiError, naiveError

def finalDemand(dataset):
    
    df = pd.DataFrame()

    df["Final_Demand"] = dataset[dataset["DaysToDepart"] == "0 days"][["cum_bookings"]]
    
    df["departure_date"] = dataset[dataset["DaysToDepart"] == "0 days"][["departure_date"]]
    
    dataset = dataset.merge(df, on="departure_date", how="right")
    
    return dataset
    
def findMASE(error, naive):
    
    mase = 0
    
    mase = round((error/naive), 4) * 100
    
    return mase
    
def dataProcessing(dataset, dtype):
    
    dataset['day_of_week'] = pd.to_datetime(dataset['departure_date']).dt.day_name() # day_of_week usind 'departure' dates
    
    dataset['DaysToDepart'] = (pd.to_datetime(dataset['departure_date'])   
                                  - pd.to_datetime(dataset['booking_date']))
    
    dataset = finalDemand(dataset) # adding final demand for each departure
    
    if dtype.lower() == 'sample': # if condition since only training data needs to have these
    
        dataset["remDemand"] = dataset["Final_Demand"] - dataset["cum_bookings"]

        dataset["rateBookings"] = dataset["cum_bookings"] / dataset["Final_Demand"]
        
        dataset = dataset[dataset["DaysToDepart"] != '0 days'][:] # only saving days prior data, leaving departure day data

    return dataset

def resultTable(sample, testcase):
    
    # creating a MASE results table and a forecasts table
    (maseDpAdd, dpAdd) = addForecast(sample, testcase, False)

    (maseDwAdd, dwAdd) = addForecast(sample, testcase, True)

    (maseDpMulti, dpMulti) = multiForecast(sample, testcase, False)

    (maseDwMulti, dwMulti) = multiForecast(sample, testcase, True)
    
    # merging various forecast results into one table
    fcstResult = maseDpAdd.merge(maseDwAdd, on=["day_of_week", "DaysToDepart", "departure_date", "booking_date"], how = "inner") \
                    .merge(maseDpMulti, on=["day_of_week", "DaysToDepart", "departure_date", "booking_date"], how = "inner") \
                    .merge(maseDwMulti, on=["day_of_week", "DaysToDepart", "departure_date", "booking_date"], how = "inner")
    
    fcstResult = round(fcstResult,0)
    
    # adding all MASE scores into a table
    maseValues = pd.DataFrame(columns=["Forecasts"],
                              index=["Additive - Days Prior",        
                                     "Additive - Days Prior + Day of Week",
                                     "Multiplicative - Days Prior",
                                     "Multiplicative - Days Prior + Day of Week"],
                              data=[[dpAdd], [dwAdd], [dpMulti], [dwMulti]])
    
    return fcstResult, maseValues

def main():
    sample = pd.read_csv('airline_data_training.csv', sep=',', header = 0)
    
    sample = dataProcessing(sample, 'sample') # processing the data to add required columns for analysis
    
    usecase = pd.read_csv('airline_data_validation.csv', sep=',', header = 0)
    
    usecase = dataProcessing(usecase, 'validation') # processing the data to add required columns for analysis

    Results, MASE = resultTable(sample, usecase)
    
    Results = Results.rename(columns={"addForecast_x": "addByDaysPrior", # renaming columns for clarity
                                      "addForecast_y": "addByDayOfWeek",
                                      "multiForecast_x" : "multiByDaysPrior",
                                      "multiForecast_y" : "multiByDayOfWeek"})
    
    
    print("According to our analysis,", str(MASE["Forecasts"].idxmin()),          # printing results
          "has the least MASE score at", str(MASE["Forecasts"].min()) + str('%') 
          + "\n\nFor MASE scores of others, refer the below table:")
    
    return Results, MASE


Results = pd.DataFrame()

MASE = pd.DataFrame()

Results, MASE = main()

MASE
